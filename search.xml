<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用hexo + GitHub pages搭建自己的blog]]></title>
    <url>%2F2018%2F03%2F14%2Fhexo5%2F</url>
    <content type="text"><![CDATA[1.注册GitHub账号并新建库 如果还没有GitHub账号的话，先到GitHub官网注册一个。 登录之后创建一个新的库 注意库名要设置成你的GitHub名.github.io不然解析的时候可能有问题 在setting里设置一下域名和GitHub pages 解析域名到yourname.github.io,我的域名是在阿里买的 2.安装git 可到git官网下载安装包 安装完成之后打开cmd，输入git --version,能显示git版本信息的话就说明git安装成功了。如果没显示，可能是没有设置环境变量。 具体的安装步骤就不详细列出了，去百度一下Windows上安装git，会有一堆安装步骤教程。 ssh配置 打开git bash终端，输入下面两条命令设置user.name和user.email。git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 生成ssh密匙 还是在git bash 终端输入命令。ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;在提示设置密码的时候直接按回车键就可以。因为那是要设置你的秘钥密码，设置了之后，每次使用秘钥的时候都要输入密码。我使用的是自己的电脑平时只有自己用，所以没设置秘钥密码，如果你使用的是公共电脑，你可以设置秘钥密码保证秘钥安全。 将公匙添加到github上 此时，在用户文件夹下的.ssh文件夹里会出现刚刚创建的ssh密钥文件id_rsa和公钥文件id_rsa.pub。 用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。 验证 3.安装node.js 安装前提到node.js官网下载安装包 windows安装一直点“下一步”，直至安装完成即可。在安装目录下新建两个文件夹。node_cache和node_global然后设置环境变量，在用户变量新建一个PATH变量名并且输入变量值(node.js安装目录)在系统变量里添加hexo/bin路径 打开cmd，输入node --version查看是否显示node版本号，若显示则安装没问题。 至此，node.js安装完成。 4.安装hexo新建一个目录blogtest，在里面打开git bash。然后就可以在终端里使用命令安装hexo了。 12345npm install hexo-cli g # 安装hexohexo init blog # 初始化博客文件夹cd blog # 切换到blog目录npm install # 安装hexo的扩展插件npm install hexo-deployer-git --save #安装git插件，以便提交到GitHub 执行hexo init blog会得到一个blog文件夹。 git bash 切换到blog目录，执行hexo s浏览器访问http://localhost:4000/查看一下本地效果,这里看到的效果是默认使用的landscape主题,后面我们会讲怎么更换主题。 到这里hexo已经完成安装了，但是还没有达到我想要的效果，就是我现在这个博客的效果。还要对主题进行一些配置。 5.主题配置 在blog目录下打开git bash终端，把next主题克隆到themes/next目录下git clone https://github.com/iissnan/hexo-theme-next themes/next 此时，next主题的配置都在themes/next目录下了 启用next主题打开在blog目录下的站点配置文件_config.yml，把原来的主题landscape改成next然后hexo s查看一下效果，已经成功切换到next主题了 6.添加评论系统7.发布到GitHub仓库 这个博客就是这样搭建起来的，还没有时间整理更新，后续会继续更新的，现在先列一个框架出来。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>搭建blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7.x搭建git服务器]]></title>
    <url>%2F2018%2F03%2F13%2Fcentos7.x%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。1.安装依赖库和编译工具1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 2.安装编译工具1yum install gcc perl-ExtUtils-MakeMaker 3.下载git并安装选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里,到官网找一个新版稳定的源码包。123456cd /usr/local/srcwget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gztar -zvxf git-2.10.0.tar.gz #解压cd git-2.10.0 make all prefix=/usr/local/git #执行编译make install prefix=/usr/local/git #编译完成后, 安装到 /usr/local/git 目录下 4.配置环境变量将git目录加入PATH123echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc #将原来的 PATH 指向目录修改为现在的目录source /etc/bashrc #生效环境变量git --version #查看到版本号说明安装成功 5.创建 git 账号密码12useradd -m gituserpasswd gituser #控制台输入创建密码后，输入您自定义的密码，并二次确认。 6.初始化 git 仓库并配置用户权限12mkdir -p /data/repositories #创建 /data/repositories 目录用于存放 git 仓库cd /data/repositories/ &amp;&amp; git init --bare test.git #创建好后，初始化这个仓库 给 git 仓库目录设置用户和用户组并设置权限 12chown -R gituser:gituser /data/repositorieschmod 755 /data/repositories 查找 git-shell 所在目录 , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录，出于安全考虑, 限制 git 账号的 ssh 连接只能是登录 git-shell。 把gituser:x:1000:1000::/home/gituser:/bin/bash改成gituser:x:1000:1000::/home/gituser:/usr/local/git/bin/git-shell 7.测试搭建好的Git服务1git clone gituser@服务器ip:/data/repositories/test.git 由于cmd markdown 需要升级会员才能上传本地图片，所以我的一些截图没法上传，看不明白的可以留言讨论。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git服务器搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 7.4 安装nginx-1.10.3]]></title>
    <url>%2F2018%2F03%2F06%2Fcentos%207.4%20%20%E5%AE%89%E8%A3%85nginx-1.10.3%2F</url>
    <content type="text"><![CDATA[1.安装前装备1234yum install gcc-c++ yum install pcre pcre-devel yum install zlib zlib-devel yum install openssl openssl--devel 2.安装1234567891011121314mkdir -p /usr/local/nginx #创建一个安装目录cd /usr/local/nginx #切换到创建好的目录wget http://nginx.org/download/nginx-1.10.3.tar.gz #下载安装包tar -zxvf nginx-1.10.3.tar.gz #解压cd nginx-1.10.3 #到解压目录下编译./configure --prefix=/usr/local/nginx --with-pcre --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module #编译make &amp;&amp; make install #安装 在编译的时候可能遇到以下报错： 12/configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre=&lt;path&gt; option. #没有安装pcre-devel 12./configure: error: SSL modules require the OpenSSL library. You can either do not enable the modules, or install the OpenSSL library into the system, or build the OpenSSL library statically from the source with nginx by using --with-openssl=&lt;path&gt; option #没有安装openssl-devel 针对上诉的报错情况，执行下面的安装命令，然后就可以正常编译yum -y install pcre-devel openssl openssl-devel 3.把Nginx添加成系统服务vim /etc/init.d/nginx在/etc/init.d下创建一个nginx文件，并输入以下代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#! /bin/bash# chkconfig: - 85 15PATH=/usr/local/nginx #Nginx的安装路径DESC="nginx daemon"NAME=nginxDAEMON=$PATH/sbin/$NAMECONFIGFILE=$PATH/conf/$NAME.confPIDFILE=$PATH/logs/$NAME.pidSCRIPTNAME=/etc/init.d/$NAMEset -e[ -x "$DAEMON" ] || exit 0do_start() &#123;$DAEMON -c $CONFIGFILE || echo -n "nginx already running"&#125;do_stop() &#123;$DAEMON -s stop || echo -n "nginx not running"&#125;do_reload() &#123;$DAEMON -s reload || echo -n "nginx can't reload"&#125;case "$1" instart)echo -n "Starting $DESC: $NAME"do_startecho ".";;stop)echo -n "Stopping $DESC: $NAME"do_stopecho ".";;reload|graceful)echo -n "Reloading $DESC configuration..."do_reloadecho ".";;restart)echo -n "Restarting $DESC: $NAME"do_stopdo_startecho ".";;*)echo "Usage: $SCRIPTNAME &#123;start|stop|reload|restart&#125;" &gt;&amp;2exit 3;;esacexit 0 然后执行下面命令123chmod a+x /etc/init.d/nginx #给执行权限chkconfig --add nginx #注册成服务 chkconfig nginx on #设置开机启动 添加成系统服务之后可以使用以下命令控制Nginx服务 1234systemctl start nginx.service #启动nginx服务systemctl stop nginx.service #停止nginx服务systemctl restart nginx.service #重启nginx服务systemctl reload nginx.service #重新读取nginx配置(这个最常用, 不用停止nginx服务就能使修改的配置生效)]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
